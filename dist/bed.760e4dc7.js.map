{"mappings":"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","sources":["queue.js"],"sourcesContent":["function registerNewPatientQueue(regWard) {\r\n    var newData = JSON.parse(sessionStorage.getItem(\"data\"));\r\n    // Current Time\r\n    var startTime = Math.floor(new Date().getTime()/1000.0);\r\n    var index = newData[\"waiting\"].length -1; // patient current index in waiting list\r\n\r\n    // Assign to Queue\r\n    sessionStorage.setItem(\"queueWardType\", regWard); // the patient should go to which ward\r\n    sessionStorage.setItem(\"queueWardIndex\", index); // the patient current index in waiting list\r\n    sessionStorage.setItem(\"queueStartTime\", startTime); // the time patient registered\r\n\r\n    //loopQueue();\r\n}\r\n\r\nfunction loopQueue() {\r\n    setInterval(function () {\r\n        var newData = JSON.parse(sessionStorage.getItem(\"data\"));\r\n        if (!newData) {\r\n            return;\r\n        }\r\n        var startTime = sessionStorage.getItem(\"queueStartTime\");\r\n\r\n        // get first item from Waiting list\r\n        if (newData[\"waiting\"][0]) {\r\n            var waitingPatient = newData[\"waiting\"][0];\r\n            // startTime = Math.floor(new Date().getTime()/1000.0);\r\n            // Assign to Queue\r\n            sessionStorage.setItem(\"queueWardType\", waitingPatient[\"ward\"]); // the patient should go to which ward\r\n            sessionStorage.setItem(\"queueWardIndex\", 0); // the patient current index in waiting list\r\n            sessionStorage.setItem(\"queueStartTime\", waitingPatient[\"registerTime\"]); // the time patient registered\r\n        }\r\n\r\n        var currentTime = Math.floor(new Date().getTime() / 1000.0);\r\n\r\n        var wardType = sessionStorage.getItem(\"queueWardType\");\r\n        var wardIndex = sessionStorage.getItem(\"queueWardIndex\");\r\n        var timeDiff = currentTime - startTime;\r\n\r\n        console.log(timeDiff);\r\n        // Assign Patient from Waiting to General / Infectious / Intensive\r\n        if (timeDiff == 10) {\r\n            // var wardIndex = newData[\"waiting\"][index];\r\n            console.log(\"Assign Patient from Waiting to General / Infectious / Intensive \" + wardType);\r\n            // get patient object\r\n            var patientObj = newData[\"waiting\"][wardIndex];\r\n\r\n            // remove from waiting list\r\n            newData[\"waiting\"].splice(wardIndex, 1);\r\n\r\n            // validate if expected ward type is available\r\n            console.log(wardType);\r\n            switch (wardType) {\r\n                case \"general\":\r\n                    if (newData[wardType] != null && newData[wardType].length >= 20) {\r\n                        // Reset waiting time\r\n                        sessionStorage.setItem(\"queueStartTime\", currentTime);\r\n                        alert(\"General ward is full, patient remain at waiting list for now.\");\r\n                    } else {\r\n                        console.log('Pushing to ward');\r\n                        newData[wardType].push(patientObj);\r\n                    }\r\n                    break;\r\n                case \"Intensive Care\":\r\n                    if (newData[wardType] != null && newData[wardType].length >= 10) {\r\n                        // Reset waiting time\r\n                        sessionStorage.setItem(\"queueStartTime\", currentTime);\r\n                        alert(\"Intensive care ward is full, patient remain at waiting list for now.\");\r\n                    } else {\r\n                        console.log('Pushing to ward');\r\n                        newData[wardType].push(patientObj);\r\n                    }\r\n                    break;\r\n                case \"Infectious Disease\":\r\n                    if (newData[wardType] != null && newData[wardType].length >= 10) {\r\n                        // Reset waiting time\r\n                        sessionStorage.setItem(\"queueStartTime\", currentTime);\r\n                        alert(\"Infectious ward is full, patient remain at waiting list for now.\");\r\n                    } else {\r\n                        console.log('Pushing to ward');\r\n                        newData[wardType].push(patientObj);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            // set latest wardIndex \r\n            sessionStorage.setItem(\"queueWardIndex\", newData[wardType].length - 1);\r\n            sessionStorage.setItem(\"data\", JSON.stringify(newData));\r\n            return;\r\n        }\r\n\r\n        // Discharge Patient from Bed & Sanitise Bed\r\n        if (timeDiff == 20) {\r\n            console.log(\"Discharge Patient from Bed & Sanitise Bed \" + wardType);\r\n            var patientObj = newData[wardType][wardIndex];\r\n\r\n            newData[wardType].splice(wardIndex, 1);\r\n            \r\n\r\n            // pump an empty record for sanitising\r\n            let recordObj = {\r\n                name: \"-\",\r\n                checkInDate: \"-\",\r\n                checkOutDate: \"-\",\r\n                age: \"-\",\r\n                doctor: \"-\",\r\n                ward: wardType,\r\n                status: \"Sanitising in progress\"\r\n            }\r\n            newData[wardType].push(recordObj);\r\n            sessionStorage.setItem(\"queueWardIndex\", newData[wardType].length - 1);\r\n            sessionStorage.setItem(\"data\", JSON.stringify(newData));\r\n            return;\r\n        }\r\n\r\n        // Finish Sanitising and Set Bed to Available\r\n        if (timeDiff == 30) {\r\n            console.log(\"Finish Sanitising and Set Bed to Available \" + wardType);\r\n            newData[wardType].splice(wardIndex, 1);\r\n            sessionStorage.setItem(\"data\", JSON.stringify(newData));\r\n\r\n            sessionStorage.removeItem(\"queueWardIndex\");\r\n            sessionStorage.removeItem(\"queueWardType\");\r\n            sessionStorage.removeItem(\"queueStartTime\");\r\n            return;\r\n        }\r\n    }, 1000);\r\n}"],"names":[],"version":3,"file":"bed.760e4dc7.js.map","sourceRoot":"/__parcel_source_root/"}